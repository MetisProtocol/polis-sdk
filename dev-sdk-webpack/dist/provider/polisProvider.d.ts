import { JsonRpcEngine } from "json-rpc-engine";
import { DomainTransactionInfo, IPolisProviderOpts } from "./types";
import { PolisOauth2Client } from "./PolisOauth2Client";
import WalletConnect from "@walletconnect/client";
export declare class PolisProvider extends JsonRpcEngine {
    _confirmUrl: string;
    _apiHost: string;
    host: string;
    _chainId: number;
    _wallet_type: string;
    _polisOauth2Client?: PolisOauth2Client;
    swalPromise: any;
    _wcConnector: WalletConnect | undefined;
    _bridgeTx: boolean;
    providerOpts: IPolisProviderOpts;
    loadingDialog: any;
    _openWindowBtnId: 'open-win-tips';
    constructor(opts: IPolisProviderOpts, polisOauth2Client?: PolisOauth2Client);
    get token(): string;
    get confirmUrl(): string;
    get bridgeUrl(): string;
    get rpcUrl(): string;
    get chainId(): number;
    set chainId(value: number);
    get apiHost(): string;
    get walletType(): string;
    static defaultUrl(): string;
    request(request: {
        method: string;
        params?: Array<any>;
    }): Promise<any>;
    connect(token: string, bridgeMetamask?: boolean, needWcSession?: boolean): void;
    private initWcConnector;
    private initWallet;
    private createPolisWallet;
    confirmTrans(req: any, res: any): Promise<void>;
    confirmTransBridge(req: any, res: any, estimateTx: DomainTransactionInfo): Promise<void>;
    signMessage(req: any, res: any, walletType: string): Promise<any>;
    getChainUrl(chainId: number): Promise<any>;
    private estimatePolisTrans;
    private initConfirmWindow;
    private safariaOpenWindowDom;
    private checkNeedUserIframe;
    private polisConfirm;
    private polisBridgePage;
    private metaMaskSendTransaction;
    private walletConnectSendTransaction;
    queryPolisTxAsync(chainId: number, tx: string, disableTooltip?: boolean): Promise<any>;
    private saveTx;
    private post;
    private handleRefreshTokenAsync;
    emit(type: any, ...args: any[]): boolean;
}
