import { IOauth2Info, IPolisOauth2Opts, IPolisClientOpts } from "../provider/types";
import { PolisSdkError } from "../provider/erros";
import { ethers } from "ethers";
export declare class PolisClient {
    private _confirmUrL;
    private _apiHost;
    private _oauthHost;
    private _oauthLoginuRL;
    private _appId;
    private _authInfo?;
    private _ethProvider?;
    private _chainId;
    private _polisprovider?;
    private _polisOauthClient?;
    private _useNuvoProvider;
    constructor(opts: IPolisClientOpts);
    get apiHost(): string;
    get authHost(): string;
    set apiHost(value: string);
    get chainId(): number;
    set chainId(value: number);
    get token(): string;
    get appId(): string;
    get confirmUrl(): string;
    get oauthLoginUrl(): string;
    get oauthInfo(): IOauth2Info;
    get web3Provider(): ethers.providers.Web3Provider;
    startOauth2(opts: IPolisOauth2Opts): Window | null;
    connect(auth?: IOauth2Info | string | any, bridgeTx?: boolean): Promise<never>;
    getContract(contractAddress: string, abi: any): ethers.Contract;
    disconnect(): Promise<any>;
    refreshToken(callback?: Function): void;
    refreshTokenAsync(): Promise<any>;
    getUserInfoAsync(): Promise<any>;
    changeChain(chainId: number): void;
    on(event: string, callback: (error: PolisSdkError | null, data: any | null) => void): void;
    once(event: string, callback: (error: PolisSdkError | null, data: any | null) => void): void;
    off(event: string, callback: (err: any, data: any) => void): void;
    estimateGasAsync(domain: string, chainId: number, fun: string, args?: any[], disableTooltip?: boolean, extendParams?: any): Promise<any>;
    getDomain(name: string, chainId: string): Promise<any>;
    createDomain(param: any, disableTooltip?: boolean): Promise<any>;
    saveDomainChains(param: any, disableTooltip?: boolean): Promise<any>;
    delDomain(domain: string, disableTooltip?: boolean): Promise<any>;
    createDapp(param: any): Promise<any>;
    modifyDapp(param: any): Promise<any>;
    deleteDapps(param: any): Promise<any>;
    getDappList(pageSize: number, pageIndex: number): Promise<any>;
    getDapp(dappId: string): Promise<any>;
    applyToDeveloper(): Promise<any>;
    getChainUrl(chainId: string): Promise<any>;
    addTokenToMM(token: any, tokenAddress?: string, tokenDecimals?: number, tokenImage?: string, chainId?: number): Promise<any>;
    private initProvider;
    private handleRefreshTokenAsync;
    private post;
    private request;
    private checkOauth;
    private saveWCSession;
    private emit;
    private initJsonRPCProvider;
}
export default PolisClient;
